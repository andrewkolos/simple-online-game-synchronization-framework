import { MessageBuffer, asIterable } from './message-buffer';
import { PickReceiveType, PickReceiveTypeGivenKey, PickSendType, PickSendTypeGivenKey, RouterTypeMap } from './message-router';

/**
 * A simple implementation of `MessageRouter`. Any filtered message buffer generated from the router will receive all messages
 * available in the underlying `MessageBuffer` when queried for a message (or the presence of one). These messages will be filtered
 * into array buffers by type, which `MessageBuffers` generated by the `MessageRouter` will query for messages.
 * @template TypeMap @inheritdoc
 */
export class SimpleMessageRouter<TypeMap extends RouterTypeMap> {

  private readonly collections: Map<keyof TypeMap, PickReceiveType<TypeMap>[]> = new Map();

  public constructor(private readonly categorizer: MessageCategorizer<TypeMap>,
    private readonly buffer: MessageBuffer<PickReceiveType<TypeMap>, PickSendType<TypeMap>>) {
  }

  public getFilteredMessageBuffer<K extends keyof TypeMap>(bufferType: K)
    : MessageBuffer<PickReceiveTypeGivenKey<TypeMap, K>, PickSendTypeGivenKey<TypeMap, K>> {

    const hasNext = () => {
      this.receiveAndOrganizeAllMessages();

      const collection = this.collections.get(bufferType);

      return collection != null && collection.length > 0;
    }

    const receive = () => {
      this.receiveAndOrganizeAllMessages();

      const collection = this.collections.get(bufferType);

      return collection == null ? [] : collection;
    };

    return asIterable({
      send: (message: PickSendType<TypeMap>) => {
        this.buffer.send(message);
      },
      hasNext,
      receive
    });
  }

  private receiveAndOrganizeAllMessages(): void {
    for (const message of this.buffer) {
      const category = this.categorizer.assignMessageCategory(message);
      const collection = this.collections.has(category) ? this.collections.get(category)! : [];
      collection.push(message);
      this.collections.set(category, collection);
    }
  }

}

export interface MessageCategorizer<TypeMap extends RouterTypeMap> {
  assignMessageCategory(message: PickReceiveType<TypeMap>): keyof TypeMap;
}