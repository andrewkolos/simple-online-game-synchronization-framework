import { MessageBuffer } from './message-buffer';
import { PickReceiveType, PickReceiveTypeGivenKey, PickSendType, PickSendTypeGivenKey, RouterTypeMap } from './message-router';

/**
 * A simple implementation of `MessageRouter`. Any filtered message buffer generated from the router will receive all messages
 * available in the underlying `MessageBuffer` when queried for a message (or the presence of one). These messages will be filtered
 * into array buffers by type, which `MessageBuffers` generated by the `MessageRouter` will query for messages.
 * @template TypeMap @inheritdoc
 */
export class SimpleMessageRouter<TypeMap extends RouterTypeMap> {
                                                          
  private readonly collections: Record<keyof TypeMap, PickReceiveType<TypeMap>[]>;
  
  public constructor(private readonly buffer: MessageBuffer<PickReceiveType<TypeMap>, PickSendType<TypeMap>>) {}
  
  public getFilteredMessageBuffer<K extends keyof TypeMap & string>(bufferType: K)
    : MessageBuffer<PickReceiveTypeGivenKey<TypeMap, K>, PickSendTypeGivenKey<TypeMap, K>> {

    return {
      send: (message: PickSendType<TypeMap>) => {
        this.buffer.send(message);
      },
      hasNext: () => {
        this.receiveAndOrganizeAllMessages();

        return this.collections[bufferType] != null && this.collections[bufferType].length > 0;
      },
      receive: () => {
        this.receiveAndOrganizeAllMessages();

        const collection = this.collections[bufferType];
        if (collection == null || collection.length === 0) {
          throw Error(`There are no messages belonging to the ${bufferType} buffer available.`);
        }

        return collection.splice(0,1)[0];
      }

    }  
  }

  private receiveAndOrganizeAllMessages(): void {
    while (this.buffer.hasNext()) {
      const message = this.buffer.receive();

      const kind = message.kind as keyof TypeMap;

      if (this.collections[kind] == null) {
        this.collections[kind] = [];
      }

      this.collections[kind].push(message);
    }
  }
  
}